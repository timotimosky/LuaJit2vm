//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SignatureGenerator {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SignatureGenerator.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to array.
        /// </summary>
        internal static string _Array {
            get {
                return ResourceManager.GetString("_Array", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to safe array.
        /// </summary>
        internal static string _SafeArray {
            get {
                return ResourceManager.GetString("_SafeArray", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to string.
        /// </summary>
        internal static string _String {
            get {
                return ResourceManager.GetString("_String", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to structure.
        /// </summary>
        internal static string _Structure {
            get {
                return ResourceManager.GetString("_Structure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to union.
        /// </summary>
        internal static string _Union {
            get {
                return ResourceManager.GetString("_Union", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to enum &apos;{0}&apos;.
        /// </summary>
        internal static string Enum {
            get {
                return ResourceManager.GetString("Enum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to error.
        /// </summary>
        internal static string Error {
            get {
                return ResourceManager.GetString("Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SizeConst and SizeParamIndex cannot be used with byref array parameters..
        /// </summary>
        internal static string ERROR_ArraySizeNotAllowedForByref {
            get {
                return ResourceManager.GetString("ERROR_ArraySizeNotAllowedForByref", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SizeParamIndex field value &apos;{0}&apos; is out of range. It should be a zero-based parameter index..
        /// </summary>
        internal static string ERROR_ArraySizeParamIndexOutOfRange {
            get {
                return ResourceManager.GetString("ERROR_ArraySizeParamIndexOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SizeParamIndex field value refers to a parameter of type &apos;{0}&apos;. Array size control parameter must be of an integral type..
        /// </summary>
        internal static string ERROR_ArraySizeParamWrongType {
            get {
                return ResourceManager.GetString("ERROR_ArraySizeParamWrongType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SizeConst field of the MarshalAsAttribute must be positive for ByValArray arrays..
        /// </summary>
        internal static string ERROR_ByValArrayInvalidLength {
            get {
                return ResourceManager.GetString("ERROR_ByValArrayInvalidLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom marshalers cannot be used on fields of structures..
        /// </summary>
        internal static string ERROR_CustomMarshalerNotAllowedOnFields {
            get {
                return ResourceManager.GetString("ERROR_CustomMarshalerNotAllowedOnFields", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom marshalers are only allowed on classes, strings, arrays, and boxed value types..
        /// </summary>
        internal static string ERROR_CustomMarshalerNotAllowedOnValueTypes {
            get {
                return ResourceManager.GetString("ERROR_CustomMarshalerNotAllowedOnValueTypes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generic types cannot be marshaled..
        /// </summary>
        internal static string ERROR_GenericTypesNotAllowed {
            get {
                return ResourceManager.GetString("ERROR_GenericTypesNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SafeHandle and CriticalHandle are not allowed array element types..
        /// </summary>
        internal static string ERROR_HandlesNotPermittedAsArrayElements {
            get {
                return ResourceManager.GetString("ERROR_HandlesNotPermittedAsArrayElements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid managed/unmanaged type combination, cannot marshal &apos;{0}&apos; as &apos;{1}&apos;. Using defaults..
        /// </summary>
        internal static string ERROR_InvalidManagedUnmanagedCombo {
            get {
                return ResourceManager.GetString("ERROR_InvalidManagedUnmanagedCombo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size value &apos;{0}&apos; is invalid. It must be non-negative..
        /// </summary>
        internal static string ERROR_InvalidUnmanagedSize {
            get {
                return ResourceManager.GetString("ERROR_InvalidUnmanagedSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom marshaler &apos;{0}&apos; does not implement a static GetInstance method that takes a single string parameter and returns an ICustomMarshaler..
        /// </summary>
        internal static string ERROR_MarshalerHasNoGetInstance {
            get {
                return ResourceManager.GetString("ERROR_MarshalerHasNoGetInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; does not implement ICustomMarshaler and hence is not a custom marshaler..
        /// </summary>
        internal static string ERROR_MarshalerIsNotICustomMarshaler {
            get {
                return ResourceManager.GetString("ERROR_MarshalerIsNotICustomMarshaler", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Marshaling of managed type &apos;{0}&apos; is allowed only for COM interop..
        /// </summary>
        internal static string ERROR_MarshalingAllowedForCom {
            get {
                return ResourceManager.GetString("ERROR_MarshalingAllowedForCom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reference type field &apos;{0}&apos; is not properly aligned. Its offset must be a multiple of pointer size on the target platform..
        /// </summary>
        internal static string ERROR_MisalignedReferenceTypeField {
            get {
                return ResourceManager.GetString("ERROR_MisalignedReferenceTypeField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The field &apos;{0}&apos; is declared by a type with explicit layout but lacks the mandatory FieldOffsetAttribute..
        /// </summary>
        internal static string ERROR_NoFieldOffsetInSequentialLayout {
            get {
                return ResourceManager.GetString("ERROR_NoFieldOffsetInSequentialLayout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no nested array marshaling support..
        /// </summary>
        internal static string ERROR_NoNestedArrayMarshaling {
            get {
                return ResourceManager.GetString("ERROR_NoNestedArrayMarshaling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reference type field &apos;{0}&apos; overlaps with another field &apos;{1}&apos;..
        /// </summary>
        internal static string ERROR_OverlappingReferenceTypeField {
            get {
                return ResourceManager.GetString("ERROR_OverlappingReferenceTypeField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The method is an instance method. All P/Invoke methods must be declared as static..
        /// </summary>
        internal static string ERROR_PInvokeIsNotStatic {
            get {
                return ResourceManager.GetString("ERROR_PInvokeIsNotStatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Structure recursively contains iself via field &apos;{0}&apos;..
        /// </summary>
        internal static string ERROR_RecursiveStructureDeclaration {
            get {
                return ResourceManager.GetString("ERROR_RecursiveStructureDeclaration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to StringBuilder fields cannot be marshaled. Use String instead..
        /// </summary>
        internal static string ERROR_StringBuilderFieldsDisallowed {
            get {
                return ResourceManager.GetString("ERROR_StringBuilderFieldsDisallowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; cannot be marshaled because it has automatic layout. Use StructLayoutAttribute with either LayoutKind.Sequential or LayoutKind.Explicit..
        /// </summary>
        internal static string ERROR_TypeHasNoLayout {
            get {
                return ResourceManager.GetString("ERROR_TypeHasNoLayout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The underlying type &apos;{0}&apos; is illegal. It must be an integral type except for char..
        /// </summary>
        internal static string ERROR_UnexpectedEnumUnderlyingType {
            get {
                return ResourceManager.GetString("ERROR_UnexpectedEnumUnderlyingType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use the unmanaged &apos;*&apos; pointer indirection on managed reference type &apos;{0}&apos;..
        /// </summary>
        internal static string ERROR_UnmanagedPointersToRefType {
            get {
                return ResourceManager.GetString("ERROR_UnmanagedPointersToRefType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid managed/unmanaged type combination, MarshalAsAttribute must be applied on this field..
        /// </summary>
        internal static string ERROR_UnmanagedTypeRequiredForField {
            get {
                return ResourceManager.GetString("ERROR_UnmanagedTypeRequiredForField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The pack value &apos;{0}&apos; is invalid. Valid values are 0, 1, 2, 4, 8, 16, 32, 64, and 128..
        /// </summary>
        internal static string ERROR_UnsupportedAlignment {
            get {
                return ResourceManager.GetString("ERROR_UnsupportedAlignment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VARIANT return type is not supported by interop. Use an &apos;out object&apos; parameter instead..
        /// </summary>
        internal static string ERROR_VariantReturnTypeNotSupported {
            get {
                return ResourceManager.GetString("ERROR_VariantReturnTypeNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VBByRefStr can only be used in combination with in/out, by-reference managed-to-unmanaged strings..
        /// </summary>
        internal static string ERROR_VBByRefParamNotByRef {
            get {
                return ResourceManager.GetString("ERROR_VBByRefParamNotByRef", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to field &apos;{0}&apos;.
        /// </summary>
        internal static string Field {
            get {
                return ResourceManager.GetString("Field", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function &apos;{0}&apos;.
        /// </summary>
        internal static string Function {
            get {
                return ResourceManager.GetString("Function", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function pointer &apos;{0}&apos;.
        /// </summary>
        internal static string FunctionPointer {
            get {
                return ResourceManager.GetString("FunctionPointer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to info.
        /// </summary>
        internal static string Info {
            get {
                return ResourceManager.GetString("Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Marshaler will marshal all elements of the actual array argument (determined at runtime)..
        /// </summary>
        internal static string INFO_ArraySizeDeterminedDynamically {
            get {
                return ResourceManager.GetString("INFO_ArraySizeDeterminedDynamically", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of elements of the unmanaged array will be the value of parameter &apos;{0}&apos;..
        /// </summary>
        internal static string INFO_ArraySizeIsByParameter {
            get {
                return ResourceManager.GetString("INFO_ArraySizeIsByParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of elements of the unmanaged array will be the value of parameter &apos;{0}&apos; plus {1}..
        /// </summary>
        internal static string INFO_ArraySizeIsByParameterPlusConstant {
            get {
                return ResourceManager.GetString("INFO_ArraySizeIsByParameterPlusConstant", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Marshaler will marshal {0} elements of the unmanaged array..
        /// </summary>
        internal static string INFO_ArraySizeIsConstant {
            get {
                return ResourceManager.GetString("INFO_ArraySizeIsConstant", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The actual marshaling of AsAny will be determined at runtime, stack/structure layout may be inaccurate..
        /// </summary>
        internal static string INFO_AsAnyMarshaling {
            get {
                return ResourceManager.GetString("INFO_AsAnyMarshaling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter may be marshaled as ANSI character (8-bit) or Unicode character (16-bit) depending on the target platform..
        /// </summary>
        internal static string INFO_AutoCharacterMarshaling {
            get {
                return ResourceManager.GetString("INFO_AutoCharacterMarshaling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter may be marshaled as ANSI string (8-bit) or Unicode string (16-bit) depending on the target platform..
        /// </summary>
        internal static string INFO_AutoStringMarshaling {
            get {
                return ResourceManager.GetString("INFO_AutoStringMarshaling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the callback may occur after the unmanaged function has returned, the delegate must be kept alive using e.g. a static field to prevent premature unmanaged thunk release..
        /// </summary>
        internal static string INFO_BewarePrematureDelegateRelease {
            get {
                return ResourceManager.GetString("INFO_BewarePrematureDelegateRelease", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unmanaged function must not modify the string. StringBuilder should be used for string out or in/out parameters..
        /// </summary>
        internal static string INFO_BewareStringImmutability {
            get {
                return ResourceManager.GetString("INFO_BewareStringImmutability", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffer containing the {0} will not be freed by the marshaler, it will be still owned by the calling function..
        /// </summary>
        internal static string INFO_BufferCallbackIn {
            get {
                return ResourceManager.GetString("INFO_BufferCallbackIn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffer containing the {0} will be freed using CoTaskMemFree by the marshaler before the call and allocated using CoTaskMemAlloc by the marshaler after the call. The calling function must pass a pointer allocated using CoTaskMemAlloc and will own the returned buffer which is to be freed using CoTaskMemFree..
        /// </summary>
        internal static string INFO_BufferCallbackInOut {
            get {
                return ResourceManager.GetString("INFO_BufferCallbackInOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffer containing the {0} will be allocated by the marshaler using CoTaskMemAlloc after the call. The calling function will own the returned buffer which is to be freed by CoTaskMemFree..
        /// </summary>
        internal static string INFO_BufferCallbackOut {
            get {
                return ResourceManager.GetString("INFO_BufferCallbackOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffer containing the {0} will be allocated by the marshaler using CoTaskMemAlloc before the call and freed by the marshaler using CoTaskMemFree after the call. If the function reallocates the buffer, it must use CoTaskMemAlloc and free the original buffer using CoTaskMemFree..
        /// </summary>
        internal static string INFO_BufferInOut {
            get {
                return ResourceManager.GetString("INFO_BufferInOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffer containing the {0} must be allocated using CoTaskMemAlloc by the function because it will be freed using CoTaskMemFree by the marshaler after the call..
        /// </summary>
        internal static string INFO_BufferOut {
            get {
                return ResourceManager.GetString("INFO_BufferOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A temporary buffer containing the {0} will be allocated by the marshaler before the call and freed by the marshaler after the call..
        /// </summary>
        internal static string INFO_BufferTemporaryIn {
            get {
                return ResourceManager.GetString("INFO_BufferTemporaryIn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This parameter will be marshaled by custom marshaler implemented by type &apos;{0}&apos;..
        /// </summary>
        internal static string INFO_CustomMarshaledParameter {
            get {
                return ResourceManager.GetString("INFO_CustomMarshaledParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Arrays and formatted reference types marshal in only by default. OutAttribute or a combination of InAttribute and OutAttribute can be used to change the marshaling direction..
        /// </summary>
        internal static string INFO_DefaultArrayAndRefTypeMarshaling {
            get {
                return ResourceManager.GetString("INFO_DefaultArrayAndRefTypeMarshaling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to StringBuilder marshals in/out by default. InAttribute or OutAttribute can be applied to optimize marshaling by omitting the other direction..
        /// </summary>
        internal static string INFO_DefaultStringBuilderMarshaling {
            get {
                return ResourceManager.GetString("INFO_DefaultStringBuilderMarshaling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SizeConst field of the MarshalAsAttribute must be positive for ByValTStr strings..
        /// </summary>
        internal static string INFO_FixedLengthStringInvalidLength {
            get {
                return ResourceManager.GetString("INFO_FixedLengthStringInvalidLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When a particular interface pointer enters the appdomain for the first time, a runtime callable wrapper (RCW) will be created. Call Marshal.ReleaseComObject or unload the appdomain to have the runtime explicitly Release the interface pointer..
        /// </summary>
        internal static string INFO_InterfacePointerToRCWMarshaling {
            get {
                return ResourceManager.GetString("INFO_InterfacePointerToRCWMarshaling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The managed type &apos;{0}&apos; is blittable and is used in a callback. Managed code will directly access the instance pointer passed from unmanaged code..
        /// </summary>
        internal static string INFO_LayoutBlittableCallbackParameter {
            get {
                return ResourceManager.GetString("INFO_LayoutBlittableCallbackParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The managed type &apos;{0}&apos; is blittable and may be pinned by the marshaler in which case a pointer to the managed instance will be passed to unmanaged code..
        /// </summary>
        internal static string INFO_LayoutBlittableParameter {
            get {
                return ResourceManager.GetString("INFO_LayoutBlittableParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Marshaler will marshal the value both when transitioning from managed to unmanaged and from unmanaged to managed. Changes made by the managed side will be visible in unmanaged and vice-versa..
        /// </summary>
        internal static string INFO_LayoutDirectionBoth {
            get {
                return ResourceManager.GetString("INFO_LayoutDirectionBoth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Marshaler will only marshal the value when transitioning from managed to unmanaged. Changes made by the unmanaged side will not be seen in managed..
        /// </summary>
        internal static string INFO_LayoutDirectionManagedToNative {
            get {
                return ResourceManager.GetString("INFO_LayoutDirectionManagedToNative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Marshaler will only marshal the value when transitioning from unmanaged to managed. Changes made by the managed side will not be seen in unmanaged..
        /// </summary>
        internal static string INFO_LayoutDirectionNativeToManaged {
            get {
                return ResourceManager.GetString("INFO_LayoutDirectionNativeToManaged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The managed type &apos;{0}&apos; is non-blittable and a temporary buffer holding the managed view of the structure will be allocated by the marshaler..
        /// </summary>
        internal static string INFO_LayoutNonBlittableCallbackParameter {
            get {
                return ResourceManager.GetString("INFO_LayoutNonBlittableCallbackParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The managed type &apos;{0}&apos; is non-blittable and a temporary buffer holding the unmanaged view of the instance will be allocated by the marshaler..
        /// </summary>
        internal static string INFO_LayoutNonBlittableParameter {
            get {
                return ResourceManager.GetString("INFO_LayoutNonBlittableParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When a particular managed object is marshaled to unmanaged for the first time, a COM callable wrapper (CCW) will be created. When the reference count to the CCW reaches zero, it will be destroyed and if there are no managed references to the object, it will become eligible for garbage collection..
        /// </summary>
        internal static string INFO_ManagedObjectToCCWMarshaling {
            get {
                return ResourceManager.GetString("INFO_ManagedObjectToCCWMarshaling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is a COM interface pointer representing the &apos;{0}&apos; managed type..
        /// </summary>
        internal static string INFO_PointerIsCOMInterfacePtr {
            get {
                return ResourceManager.GetString("INFO_PointerIsCOMInterfacePtr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Platform invoke will also look for &apos;{0}&apos; if &apos;{1}&apos; is not found..
        /// </summary>
        internal static string INFO_PossibleAltNameLookup {
            get {
                return ResourceManager.GetString("INFO_PossibleAltNameLookup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Platform invoke may also look for &apos;{0}&apos; or &apos;{1}&apos; depending on the target platform..
        /// </summary>
        internal static string INFO_PossibleAutoAltNameLookup {
            get {
                return ResourceManager.GetString("INFO_PossibleAutoAltNameLookup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The actual element VARTYPE can be changed by wrapping the element in UnknownWrapper, DispatchWrapper, ErrorWrapper, CurrencyWrapper, or BStrWrapper (all in System.Runtime.InteropServices namespace). .
        /// </summary>
        internal static string INFO_SafeArrayOfVariantsWrapperUse {
            get {
                return ResourceManager.GetString("INFO_SafeArrayOfVariantsWrapperUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Elements of the safe array will be of &apos;{0}&apos; type..
        /// </summary>
        internal static string INFO_SafeArrayWillMarshalAs {
            get {
                return ResourceManager.GetString("INFO_SafeArrayWillMarshalAs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to See mscorlib.tlb for the full definition of the &apos;{0}&apos; interface type..
        /// </summary>
        internal static string INFO_SeeMscorlibTlbForInterface {
            get {
                return ResourceManager.GetString("INFO_SeeMscorlibTlbForInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The managed parameter is of the StringBuilder type and has to be initialized with an appropriate capacity prior to the call..
        /// </summary>
        internal static string INFO_StringBuilderRequiresInit {
            get {
                return ResourceManager.GetString("INFO_StringBuilderRequiresInit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to interface &apos;{0}&apos;.
        /// </summary>
        internal static string Interface {
            get {
                return ResourceManager.GetString("Interface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to number {0}.
        /// </summary>
        internal static string Number {
            get {
                return ResourceManager.GetString("Number", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to parameter &apos;{0}&apos;.
        /// </summary>
        internal static string Parameter {
            get {
                return ResourceManager.GetString("Parameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to return value.
        /// </summary>
        internal static string ReturnValue {
            get {
                return ResourceManager.GetString("ReturnValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to structure &apos;{0}&apos;.
        /// </summary>
        internal static string Structure {
            get {
                return ResourceManager.GetString("Structure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to union &apos;{0}&apos;.
        /// </summary>
        internal static string Union {
            get {
                return ResourceManager.GetString("Union", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Marshaler will marshal only one element of the unmanaged array. Use SizeConst and/or SizeParamIndex fields of MarshalAsAttribute..
        /// </summary>
        internal static string WARN_ArraySizeDefaultsToOne {
            get {
                return ResourceManager.GetString("WARN_ArraySizeDefaultsToOne", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SizeConst and SizeParamIndex fields of MarshalAsAttribute will be ignored. Marshaler will always marshal all elements of the array which is passed from managed to unmanaged..
        /// </summary>
        internal static string WARN_ArraySizesIgnored {
            get {
                return ResourceManager.GetString("WARN_ArraySizesIgnored", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The OutAttribute has no effect on &apos;{0}&apos;. It is only useful on those by value reference-type parameters which are StringBuilders, arrays, or formatted reference types..
        /// </summary>
        internal static string WARN_ByValRefTypeMarkedOut {
            get {
                return ResourceManager.GetString("WARN_ByValRefTypeMarkedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The OutAttribute has no effect on a string which is passed by value. It will be always marshaled in only..
        /// </summary>
        internal static string WARN_ByValStringMarkedOut {
            get {
                return ResourceManager.GetString("WARN_ByValStringMarkedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The OutAttribute has no effect on a value type which is passed by value. It will be always marshaled in only..
        /// </summary>
        internal static string WARN_ByValValueTypeMarkedOut {
            get {
                return ResourceManager.GetString("WARN_ByValValueTypeMarkedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size value &apos;{0}&apos; is too small. The minimum unmanaged size of the type is &apos;{1}&apos;..
        /// </summary>
        internal static string WARN_InsufficientUnmanagedSize {
            get {
                return ResourceManager.GetString("WARN_InsufficientUnmanagedSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Although InAttribute is used, the argument may be marshaled out as well because &apos;{0}&apos; is blittable..
        /// </summary>
        internal static string WARN_LayoutBlittableMarkedIn {
            get {
                return ResourceManager.GetString("WARN_LayoutBlittableMarkedIn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Although OutAttribute is used, the the argument may be marshaled in as well because &apos;{0}&apos; is blittable..
        /// </summary>
        internal static string WARN_LayoutBlittableMarkedOut {
            get {
                return ResourceManager.GetString("WARN_LayoutBlittableMarkedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find custom marshaler type &apos;{0}&apos;..
        /// </summary>
        internal static string WARN_MarshalerTypeNotFound {
            get {
                return ResourceManager.GetString("WARN_MarshalerTypeNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to determine parameters and return type for the function pointer parameter type &apos;{0}&apos;. Use a specific delegate type if possible..
        /// </summary>
        internal static string WARN_NonSpecificDelegateUsed {
            get {
                return ResourceManager.GetString("WARN_NonSpecificDelegateUsed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Pack field has no effect when LayoutKind is not LayoutKind.Sequential..
        /// </summary>
        internal static string WARN_NoPackEffectOnExplicitLayout {
            get {
                return ResourceManager.GetString("WARN_NoPackEffectOnExplicitLayout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; can be considered as &apos;{1}&apos; by the marshaler on some versions of the runtime. The MarshalAsAttribute should be avoided..
        /// </summary>
        internal static string WARN_NormalizedStructure {
            get {
                return ResourceManager.GetString("WARN_NormalizedStructure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The method is public. P/Invoke methods should be declared with non-public visibility for security reasons..
        /// </summary>
        internal static string WARN_PInvokeIsPublic {
            get {
                return ResourceManager.GetString("WARN_PInvokeIsPublic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The method is declared with vararg but the calling convention is &apos;{0}&apos;. It should be &apos;Cdecl&apos;..
        /// </summary>
        internal static string WARN_VarargIsNotCdecl {
            get {
                return ResourceManager.GetString("WARN_VarargIsNotCdecl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to warning.
        /// </summary>
        internal static string Warning {
            get {
                return ResourceManager.GetString("Warning", resourceCulture);
            }
        }
    }
}
