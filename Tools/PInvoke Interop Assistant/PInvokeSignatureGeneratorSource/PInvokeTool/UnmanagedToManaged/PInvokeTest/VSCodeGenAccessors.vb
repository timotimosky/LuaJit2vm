' Copyright (c) Microsoft Corporation.  All rights reserved.
Imports Microsoft.VisualStudio.TestTools.UnitTesting

'------------------------------------------------------------------------------
'<autogenerated>
'        This code was generated by Microsoft Visual Studio Team System 2005.
'
'        Changes to this file may cause incorrect behavior and will be lost if
'        the code is regenerated.
'</autogenerated>
<System.Diagnostics.DebuggerStepThrough(), _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class BaseAccessor

    Protected m_privateObject As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject

    Protected Sub New(ByVal target As Object, ByVal type As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType)
        MyBase.New()
        m_privateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type)
    End Sub

    Protected Sub New(ByVal type As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType)
        Me.New(Nothing, type)
    End Sub

    Friend Overridable ReadOnly Property Target() As Object
        Get
            Return m_privateObject.Target
        End Get
    End Property

    Public Overrides Function ToString() As String
        Return Me.Target.ToString
    End Function

    Public Overloads Overrides Function Equals(ByVal obj As Object) As Boolean
        If GetType(BaseAccessor).IsInstanceOfType(obj) Then
            obj = CType(obj, BaseAccessor).Target
        End If
        Return Me.Target.Equals(obj)
    End Function

    Public Overrides Function GetHashCode() As Integer
        Return Me.Target.GetHashCode
    End Function
End Class
<System.Diagnostics.DebuggerStepThrough(),  _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")>  _
Friend Class PInvoke_Parser_MacroAccessor
    Inherits BaseAccessor
    
    Protected Shared m_privateType As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(GetType(Global.PInvoke.Parser.Macro))
    
    Friend Sub New(ByVal target As Global.PInvoke.Parser.Macro)
        MyBase.New(target, m_privateType)
    End Sub
    
    Friend Property m_name() As String
        Get
            Dim ret As String = CType(m_privateObject.GetFieldOrProperty("m_name"),String)
            Return ret
        End Get
        Set
            m_privateObject.SetFieldOrProperty("m_name", value)
        End Set
    End Property
    
    Friend Property m_value() As String
        Get
            Dim ret As String = CType(m_privateObject.GetFieldOrProperty("m_value"),String)
            Return ret
        End Get
        Set
            m_privateObject.SetFieldOrProperty("m_value", value)
        End Set
    End Property
    
    Friend Function TryGetAsNumber(ByRef numberValue As Long) As Boolean
        Dim args() As Object = New Object() {numberValue}
        Dim ret As Boolean = CType(m_privateObject.Invoke("TryGetAsNumber", New System.Type() {GetType(Long).MakeByRefType}, args),Boolean)
        numberValue = CType(args(0),Long)
        Return ret
    End Function
End Class
<System.Diagnostics.DebuggerStepThrough(),  _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")>  _
Friend Class PInvoke_Parser_MetadataFieldsAccessor
    Inherits BaseAccessor
    
    Protected Shared m_privateType As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("PInvoke", "PInvoke.Parser.MetadataFields")
    
    Friend Sub New()
        MyBase.New(m_privateType)
    End Sub
    
    Friend Shared Property [In]() As String
        Get
            Dim ret As String = CType(m_privateType.GetStaticFieldOrProperty("In"),String)
            Return ret
        End Get
        Set
            m_privateType.SetStaticFieldOrProperty("In", value)
        End Set
    End Property
    
    Friend Shared Property Out() As String
        Get
            Dim ret As String = CType(m_privateType.GetStaticFieldOrProperty("Out"),String)
            Return ret
        End Get
        Set
            m_privateType.SetStaticFieldOrProperty("Out", value)
        End Set
    End Property
    
    Friend Shared Property InOut() As String
        Get
            Dim ret As String = CType(m_privateType.GetStaticFieldOrProperty("InOut"),String)
            Return ret
        End Get
        Set
            m_privateType.SetStaticFieldOrProperty("InOut", value)
        End Set
    End Property
    
    Friend Shared Function ConvertToMetadataToken(ByVal name As String) As String
        Dim args() As Object = New Object() {name}
        Dim ret As String = CType(m_privateType.InvokeStatic("ConvertToMetadataToken", New System.Type() {GetType(String)}, args),String)
        Return ret
    End Function
    
    Friend Shared Function CreatePrivate() As Object
        Dim priv_obj As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("PInvoke", "PInvoke.Parser.MetadataFields", New Object(-1) {})
        Return priv_obj.Target
    End Function
End Class













<System.Diagnostics.DebuggerStepThrough(),  _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")>  _
Friend Class PInvoke_Transform_CodeTransformAccessor
    Inherits BaseAccessor
    
    Protected Shared m_privateType As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("sigimplib", "PInvoke.Transform.CodeTransform")
    
    Friend Sub New(ByVal target As Object)
        MyBase.New(target, m_privateType)
    End Sub
    
    Friend Property m_lang() As Global.PInvoke.Transform.LanguageType
        Get
            Dim ret As Global.PInvoke.Transform.LanguageType = CType(m_privateObject.GetFieldOrProperty("m_lang"),Global.PInvoke.Transform.LanguageType)
            Return ret
        End Get
        Set
            m_privateObject.SetFieldOrProperty("m_lang", value)
        End Set
    End Property
    
    Friend Property m_typeMap() As System.Collections.Generic.Dictionary(Of String, PInvoke.NativeSymbol)
        Get
            Dim ret As System.Collections.Generic.Dictionary(Of String, PInvoke.NativeSymbol) = CType(m_privateObject.GetFieldOrProperty("m_typeMap"),System.Collections.Generic.Dictionary(Of String, PInvoke.NativeSymbol))
            Return ret
        End Get
        Set
            m_privateObject.SetFieldOrProperty("m_typeMap", value)
        End Set
    End Property
    
    Friend Property m_symbolValueMap() As System.Collections.Generic.Dictionary(Of String, PInvoke.NativeSymbol)
        Get
            Dim ret As System.Collections.Generic.Dictionary(Of String, PInvoke.NativeSymbol) = CType(m_privateObject.GetFieldOrProperty("m_symbolValueMap"),System.Collections.Generic.Dictionary(Of String, PInvoke.NativeSymbol))
            Return ret
        End Get
        Set
            m_privateObject.SetFieldOrProperty("m_symbolValueMap", value)
        End Set
    End Property
    
    Friend Shared Function CreatePrivate(ByVal lang As Global.PInvoke.Transform.LanguageType) As Object
        Dim args() As Object = New Object() {lang}
        Dim priv_obj As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("sigimplib", "PInvoke.Transform.CodeTransform", New System.Type() {GetType(Global.PInvoke.Transform.LanguageType)}, args)
        Return priv_obj.Target
    End Function
    
    Friend Function GenerateTypeReference(ByVal nt As Global.PInvoke.NativeType) As Global.System.CodeDom.CodeTypeReference
        Dim args() As Object = New Object() {nt}
        Dim ret As Global.System.CodeDom.CodeTypeReference = CType(m_privateObject.Invoke("GenerateTypeReference", New System.Type() {GetType(Global.PInvoke.NativeType)}, args),Global.System.CodeDom.CodeTypeReference)
        Return ret
    End Function
    
    Friend Function GenerateDeclaration(ByVal nt As Global.PInvoke.NativeDefinedType) As Global.System.CodeDom.CodeTypeDeclaration
        Dim args() As Object = New Object() {nt}
        Dim ret As Global.System.CodeDom.CodeTypeDeclaration = CType(m_privateObject.Invoke("GenerateDeclaration", New System.Type() {GetType(Global.PInvoke.NativeDefinedType)}, args),Global.System.CodeDom.CodeTypeDeclaration)
        Return ret
    End Function
    
    Friend Function GenerateStruct(ByVal ntStruct As Global.PInvoke.NativeStruct) As Global.System.CodeDom.CodeTypeDeclaration
        Dim args() As Object = New Object() {ntStruct}
        Dim ret As Global.System.CodeDom.CodeTypeDeclaration = CType(m_privateObject.Invoke("GenerateStruct", New System.Type() {GetType(Global.PInvoke.NativeStruct)}, args),Global.System.CodeDom.CodeTypeDeclaration)
        Return ret
    End Function
    
    Friend Function GenerateEnum(ByVal ntEnum As Global.PInvoke.NativeEnum) As Global.System.CodeDom.CodeTypeDeclaration
        Dim args() As Object = New Object() {ntEnum}
        Dim ret As Global.System.CodeDom.CodeTypeDeclaration = CType(m_privateObject.Invoke("GenerateEnum", New System.Type() {GetType(Global.PInvoke.NativeEnum)}, args),Global.System.CodeDom.CodeTypeDeclaration)
        Return ret
    End Function
    
    Friend Function GenerateUnion(ByVal ntUnion As Global.PInvoke.NativeUnion) As Global.System.CodeDom.CodeTypeDeclaration
        Dim args() As Object = New Object() {ntUnion}
        Dim ret As Global.System.CodeDom.CodeTypeDeclaration = CType(m_privateObject.Invoke("GenerateUnion", New System.Type() {GetType(Global.PInvoke.NativeUnion)}, args),Global.System.CodeDom.CodeTypeDeclaration)
        Return ret
    End Function
    
    Friend Function GenerateDelegate(ByVal ntFuncPtr As Global.PInvoke.NativeFunctionPointer) As Global.System.CodeDom.CodeTypeDelegate
        Dim args() As Object = New Object() {ntFuncPtr}
        Dim ret As Global.System.CodeDom.CodeTypeDelegate = CType(m_privateObject.Invoke("GenerateDelegate", New System.Type() {GetType(Global.PInvoke.NativeFunctionPointer)}, args),Global.System.CodeDom.CodeTypeDelegate)
        Return ret
    End Function
    
    Friend Function GenerateProcedures(ByVal enumerable As System.Collections.Generic.IEnumerable(Of PInvoke.NativeProcedure)) As Global.System.CodeDom.CodeTypeDeclaration
        Dim args() As Object = New Object() {enumerable}
        Dim ret As Global.System.CodeDom.CodeTypeDeclaration = CType(m_privateObject.Invoke("GenerateProcedures", New System.Type() {GetType(System.Collections.Generic.IEnumerable(Of PInvoke.NativeProcedure))}, args),Global.System.CodeDom.CodeTypeDeclaration)
        Return ret
    End Function
    
    Friend Function GenerateProcedure(ByVal ntProc As Global.PInvoke.NativeProcedure) As Global.System.CodeDom.CodeMemberMethod
        Dim args() As Object = New Object() {ntProc}
        Dim ret As Global.System.CodeDom.CodeMemberMethod = CType(m_privateObject.Invoke("GenerateProcedure", New System.Type() {GetType(Global.PInvoke.NativeProcedure)}, args),Global.System.CodeDom.CodeMemberMethod)
        Return ret
    End Function
    
    Friend Function GenerateParameters(ByVal ntSig As Global.PInvoke.NativeSignature, ByVal comments As String) As Global.System.CodeDom.CodeParameterDeclarationExpressionCollection
        Dim args() As Object = New Object() {ntSig, comments}
        Dim ret As Global.System.CodeDom.CodeParameterDeclarationExpressionCollection = CType(m_privateObject.Invoke("GenerateParameters", New System.Type() {GetType(Global.PInvoke.NativeSignature), GetType(String)}, args),Global.System.CodeDom.CodeParameterDeclarationExpressionCollection)
        Return ret
    End Function
    
    Friend Overloads Function GenerateConstants(ByVal enumerable As System.Collections.Generic.IEnumerable(Of PInvoke.NativeConstant)) As Global.System.CodeDom.CodeTypeDeclaration
        Dim args() As Object = New Object() {enumerable}
        Dim ret As Global.System.CodeDom.CodeTypeDeclaration = CType(m_privateObject.Invoke("GenerateConstants", New System.Type() {GetType(System.Collections.Generic.IEnumerable(Of PInvoke.NativeConstant))}, args),Global.System.CodeDom.CodeTypeDeclaration)
        Return ret
    End Function
    
    Friend Overloads Sub GenerateConstants(ByVal ctd As Global.System.CodeDom.CodeTypeDeclaration, ByVal enumerable As System.Collections.Generic.IEnumerable(Of PInvoke.NativeConstant))
        Dim args() As Object = New Object() {ctd, enumerable}
        m_privateObject.Invoke("GenerateConstants", New System.Type() {GetType(Global.System.CodeDom.CodeTypeDeclaration), GetType(System.Collections.Generic.IEnumerable(Of PInvoke.NativeConstant))}, args)
    End Sub
    
    Friend Sub GenerateContainerMembers(ByVal nt As Global.PInvoke.NativeDefinedType, ByVal ctd As Global.System.CodeDom.CodeTypeDeclaration)
        Dim args() As Object = New Object() {nt, ctd}
        m_privateObject.Invoke("GenerateContainerMembers", New System.Type() {GetType(Global.PInvoke.NativeDefinedType), GetType(Global.System.CodeDom.CodeTypeDeclaration)}, args)
    End Sub
    
    Friend Overloads Function IsBitVector(ByVal nt As Global.PInvoke.NativeType) As Boolean
        Dim args() As Object = New Object() {nt}
        Dim ret As Boolean = CType(m_privateObject.Invoke("IsBitVector", New System.Type() {GetType(Global.PInvoke.NativeType)}, args),Boolean)
        Return ret
    End Function
    
    Friend Overloads Function IsBitVector(ByVal nt As Global.PInvoke.NativeType, ByRef bitvector As Global.PInvoke.NativeBitVector) As Boolean
        Dim args() As Object = New Object() {nt, bitvector}
        Dim ret As Boolean = CType(m_privateObject.Invoke("IsBitVector", New System.Type() {GetType(Global.PInvoke.NativeType), GetType(Global.PInvoke.NativeBitVector).MakeByRefType}, args),Boolean)
        bitvector = CType(args(1),Global.PInvoke.NativeBitVector)
        Return ret
    End Function
    
    Friend Sub GenerateBitVectorProperty(ByVal ntMember As Global.PInvoke.NativeMember, ByVal offset As Integer, ByVal ctd As Global.System.CodeDom.CodeTypeDeclaration, ByVal codeMember As Global.System.CodeDom.CodeMemberField)
        Dim args() As Object = New Object() {ntMember, offset, ctd, codeMember}
        m_privateObject.Invoke("GenerateBitVectorProperty", New System.Type() {GetType(Global.PInvoke.NativeMember), GetType(Integer), GetType(Global.System.CodeDom.CodeTypeDeclaration), GetType(Global.System.CodeDom.CodeMemberField)}, args)
    End Sub
    
    Friend Sub GenerateBitVectorPropertyGet(ByVal prop As Global.System.CodeDom.CodeMemberProperty, ByVal fieldName As String, ByVal mask As UInteger, ByVal offset As Integer, ByVal bitVector As Global.PInvoke.NativeBitVector)
        Dim args() As Object = New Object() {prop, fieldName, mask, offset, bitVector}
        m_privateObject.Invoke("GenerateBitVectorPropertyGet", New System.Type() {GetType(Global.System.CodeDom.CodeMemberProperty), GetType(String), GetType(UInteger), GetType(Integer), GetType(Global.PInvoke.NativeBitVector)}, args)
    End Sub
    
    Friend Sub GenerateBitVectorPropertySet(ByVal prop As Global.System.CodeDom.CodeMemberProperty, ByVal fieldName As String, ByVal mask As UInteger, ByVal offset As Integer, ByVal bitVector As Global.PInvoke.NativeBitVector)
        Dim args() As Object = New Object() {prop, fieldName, mask, offset, bitVector}
        m_privateObject.Invoke("GenerateBitVectorPropertySet", New System.Type() {GetType(Global.System.CodeDom.CodeMemberProperty), GetType(String), GetType(UInteger), GetType(Integer), GetType(Global.PInvoke.NativeBitVector)}, args)
    End Sub
    
    Friend Function GenerateContainerMember(ByVal nt As Global.PInvoke.NativeMember, ByVal ctd As Global.System.CodeDom.CodeTypeDeclaration) As Global.System.CodeDom.CodeMemberField
        Dim args() As Object = New Object() {nt, ctd}
        Dim ret As Global.System.CodeDom.CodeMemberField = CType(m_privateObject.Invoke("GenerateContainerMember", New System.Type() {GetType(Global.PInvoke.NativeMember), GetType(Global.System.CodeDom.CodeTypeDeclaration)}, args),Global.System.CodeDom.CodeMemberField)
        Return ret
    End Function
    
    Friend Function GenerateInitExpression(ByVal member As Global.System.CodeDom.CodeMemberField, ByVal target As Global.PInvoke.NativeSymbol, ByVal ntExpr As Global.PInvoke.NativeValueExpression) As Boolean
        Dim args() As Object = New Object() {member, target, ntExpr}
        Dim ret As Boolean = CType(m_privateObject.Invoke("GenerateInitExpression", New System.Type() {GetType(Global.System.CodeDom.CodeMemberField), GetType(Global.PInvoke.NativeSymbol), GetType(Global.PInvoke.NativeValueExpression)}, args),Boolean)
        Return ret
    End Function
    
    Friend Function TryGenerateValueExpression(ByVal ntExpr As Global.PInvoke.NativeValueExpression, ByRef expr As Global.System.CodeDom.CodeExpression, ByRef exprType As Global.System.CodeDom.CodeTypeReference, ByRef ex As Global.System.Exception) As Boolean
        Dim args() As Object = New Object() {ntExpr, expr, exprType, ex}
        Dim ret As Boolean = CType(m_privateObject.Invoke("TryGenerateValueExpression", New System.Type() {GetType(Global.PInvoke.NativeValueExpression), GetType(Global.System.CodeDom.CodeExpression).MakeByRefType, GetType(Global.System.CodeDom.CodeTypeReference).MakeByRefType, GetType(Global.System.Exception).MakeByRefType}, args),Boolean)
        expr = CType(args(1),Global.System.CodeDom.CodeExpression)
        exprType = CType(args(2),Global.System.CodeDom.CodeTypeReference)
        ex = CType(args(3),Global.System.Exception)
        Return ret
    End Function
    
    Friend Function GenerateTypeReferenceImpl(ByVal nt As Global.PInvoke.NativeType, ByRef comment As String) As Global.System.CodeDom.CodeTypeReference
        Dim args() As Object = New Object() {nt, comment}
        Dim ret As Global.System.CodeDom.CodeTypeReference = CType(m_privateObject.Invoke("GenerateTypeReferenceImpl", New System.Type() {GetType(Global.PInvoke.NativeType), GetType(String).MakeByRefType}, args),Global.System.CodeDom.CodeTypeReference)
        comment = CType(args(1),String)
        Return ret
    End Function
    
    Friend Function GenerateDefinedTypeReferenceImpl(ByVal definedNt As Global.PInvoke.NativeDefinedType, ByRef comment As String) As Global.System.CodeDom.CodeTypeReference
        Dim args() As Object = New Object() {definedNt, comment}
        Dim ret As Global.System.CodeDom.CodeTypeReference = CType(m_privateObject.Invoke("GenerateDefinedTypeReferenceImpl", New System.Type() {GetType(Global.PInvoke.NativeDefinedType), GetType(String).MakeByRefType}, args),Global.System.CodeDom.CodeTypeReference)
        comment = CType(args(1),String)
        Return ret
    End Function
    
    Friend Function GenerateProxyTypeReferenceImpl(ByVal proxyNt As Global.PInvoke.NativeProxyType, ByRef comment As String) As Global.System.CodeDom.CodeTypeReference
        Dim args() As Object = New Object() {proxyNt, comment}
        Dim ret As Global.System.CodeDom.CodeTypeReference = CType(m_privateObject.Invoke("GenerateProxyTypeReferenceImpl", New System.Type() {GetType(Global.PInvoke.NativeProxyType), GetType(String).MakeByRefType}, args),Global.System.CodeDom.CodeTypeReference)
        comment = CType(args(1),String)
        Return ret
    End Function
    
    Friend Function GenerateSpecializedTypeReferenceImpl(ByVal specialNt As Global.PInvoke.NativeSpecializedType, ByRef comment As String) As Global.System.CodeDom.CodeTypeReference
        Dim args() As Object = New Object() {specialNt, comment}
        Dim ret As Global.System.CodeDom.CodeTypeReference = CType(m_privateObject.Invoke("GenerateSpecializedTypeReferenceImpl", New System.Type() {GetType(Global.PInvoke.NativeSpecializedType), GetType(String).MakeByRefType}, args),Global.System.CodeDom.CodeTypeReference)
        comment = CType(args(1),String)
        Return ret
    End Function
    
    Friend Function GenerateValueExpressionImpl(ByVal node As Global.PInvoke.Parser.ExpressionNode, ByRef type As Global.System.CodeDom.CodeTypeReference) As Global.System.CodeDom.CodeExpression
        Dim args() As Object = New Object() {node, type}
        Dim ret As Global.System.CodeDom.CodeExpression = CType(m_privateObject.Invoke("GenerateValueExpressionImpl", New System.Type() {GetType(Global.PInvoke.Parser.ExpressionNode), GetType(Global.System.CodeDom.CodeTypeReference).MakeByRefType}, args),Global.System.CodeDom.CodeExpression)
        type = CType(args(1),Global.System.CodeDom.CodeTypeReference)
        Return ret
    End Function
    
    Friend Function GenerateValueExpressionNegation(ByVal node As Global.PInvoke.Parser.ExpressionNode, ByRef exprType As Global.System.CodeDom.CodeTypeReference) As Global.System.CodeDom.CodeExpression
        Dim args() As Object = New Object() {node, exprType}
        Dim ret As Global.System.CodeDom.CodeExpression = CType(m_privateObject.Invoke("GenerateValueExpressionNegation", New System.Type() {GetType(Global.PInvoke.Parser.ExpressionNode), GetType(Global.System.CodeDom.CodeTypeReference).MakeByRefType}, args),Global.System.CodeDom.CodeExpression)
        exprType = CType(args(1),Global.System.CodeDom.CodeTypeReference)
        Return ret
    End Function
    
    Friend Function GenerateValueExpressionBinaryOperation(ByVal node As Global.PInvoke.Parser.ExpressionNode, ByRef exprType As Global.System.CodeDom.CodeTypeReference) As Global.System.CodeDom.CodeExpression
        Dim args() As Object = New Object() {node, exprType}
        Dim ret As Global.System.CodeDom.CodeExpression = CType(m_privateObject.Invoke("GenerateValueExpressionBinaryOperation", New System.Type() {GetType(Global.PInvoke.Parser.ExpressionNode), GetType(Global.System.CodeDom.CodeTypeReference).MakeByRefType}, args),Global.System.CodeDom.CodeExpression)
        exprType = CType(args(1),Global.System.CodeDom.CodeTypeReference)
        Return ret
    End Function
    
    Friend Function GenerateValueExpressionShift(ByVal node As Global.PInvoke.Parser.ExpressionNode, ByRef exprType As Global.System.CodeDom.CodeTypeReference) As Global.System.CodeDom.CodeExpression
        Dim args() As Object = New Object() {node, exprType}
        Dim ret As Global.System.CodeDom.CodeExpression = CType(m_privateObject.Invoke("GenerateValueExpressionShift", New System.Type() {GetType(Global.PInvoke.Parser.ExpressionNode), GetType(Global.System.CodeDom.CodeTypeReference).MakeByRefType}, args),Global.System.CodeDom.CodeExpression)
        exprType = CType(args(1),Global.System.CodeDom.CodeTypeReference)
        Return ret
    End Function
    
    Friend Function GenerateValueExpressionLeaf(ByVal node As Global.PInvoke.Parser.ExpressionNode, ByRef leafType As Global.System.CodeDom.CodeTypeReference) As Global.System.CodeDom.CodeExpression
        Dim args() As Object = New Object() {node, leafType}
        Dim ret As Global.System.CodeDom.CodeExpression = CType(m_privateObject.Invoke("GenerateValueExpressionLeaf", New System.Type() {GetType(Global.PInvoke.Parser.ExpressionNode), GetType(Global.System.CodeDom.CodeTypeReference).MakeByRefType}, args),Global.System.CodeDom.CodeExpression)
        leafType = CType(args(1),Global.System.CodeDom.CodeTypeReference)
        Return ret
    End Function
    
    Friend Function GenerateValueExpressionCast(ByVal node As Global.PInvoke.Parser.ExpressionNode, ByRef exprType As Global.System.CodeDom.CodeTypeReference) As Global.System.CodeDom.CodeExpression
        Dim args() As Object = New Object() {node, exprType}
        Dim ret As Global.System.CodeDom.CodeExpression = CType(m_privateObject.Invoke("GenerateValueExpressionCast", New System.Type() {GetType(Global.PInvoke.Parser.ExpressionNode), GetType(Global.System.CodeDom.CodeTypeReference).MakeByRefType}, args),Global.System.CodeDom.CodeExpression)
        exprType = CType(args(1),Global.System.CodeDom.CodeTypeReference)
        Return ret
    End Function
    
    Friend Function CalculateConstantType(ByVal nConst As Global.PInvoke.NativeConstant) As Global.System.CodeDom.CodeTypeReference
        Dim args() As Object = New Object() {nConst}
        Dim ret As Global.System.CodeDom.CodeTypeReference = CType(m_privateObject.Invoke("CalculateConstantType", New System.Type() {GetType(Global.PInvoke.NativeConstant)}, args),Global.System.CodeDom.CodeTypeReference)
        Return ret
    End Function
    
    Friend Function GetManagedNameForBitVector(ByVal bitNt As Global.PInvoke.NativeBitVector) As String
        Dim args() As Object = New Object() {bitNt}
        Dim ret As String = CType(m_privateObject.Invoke("GetManagedNameForBitVector", New System.Type() {GetType(Global.PInvoke.NativeBitVector)}, args),String)
        Return ret
    End Function
End Class


<System.Diagnostics.DebuggerStepThrough(),  _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")>  _
Friend Class PInvoke_Parser_TokenHelperAccessor
    Inherits BaseAccessor
    
    Protected Shared m_privateType As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("sigimplib", "PInvoke.Parser.TokenHelper")
    
    Friend Sub New()
        MyBase.New(m_privateType)
    End Sub
    
    Friend Shared Property s_keywordMap() As System.Collections.Generic.Dictionary(Of String, PInvoke.Parser.TokenType)
        Get
            Dim ret As System.Collections.Generic.Dictionary(Of String, PInvoke.Parser.TokenType) = CType(m_privateType.GetStaticFieldOrProperty("s_keywordMap"),System.Collections.Generic.Dictionary(Of String, PInvoke.Parser.TokenType))
            Return ret
        End Get
        Set
            m_privateType.SetStaticFieldOrProperty("s_keywordMap", value)
        End Set
    End Property
    
    Friend Shared ReadOnly Property KeywordMap() As System.Collections.Generic.Dictionary(Of String, PInvoke.Parser.TokenType)
        Get
            Dim ret As System.Collections.Generic.Dictionary(Of String, PInvoke.Parser.TokenType) = CType(m_privateType.GetStaticProperty("KeywordMap"),System.Collections.Generic.Dictionary(Of String, PInvoke.Parser.TokenType))
            Return ret
        End Get
    End Property
    
    Friend Overloads Shared Function IsKeyword(ByVal word As String) As Boolean
        Dim args() As Object = New Object() {word}
        Dim ret As Boolean = CType(m_privateType.InvokeStatic("IsKeyword", New System.Type() {GetType(String)}, args),Boolean)
        Return ret
    End Function
    
    Friend Overloads Shared Function IsKeyword(ByVal tt As Global.PInvoke.Parser.TokenType) As Boolean
        Dim args() As Object = New Object() {tt}
        Dim ret As Boolean = CType(m_privateType.InvokeStatic("IsKeyword", New System.Type() {GetType(Global.PInvoke.Parser.TokenType)}, args),Boolean)
        Return ret
    End Function
    
    Friend Shared Function IsCallTypeModifier(ByVal tt As Global.PInvoke.Parser.TokenType) As Boolean
        Dim args() As Object = New Object() {tt}
        Dim ret As Boolean = CType(m_privateType.InvokeStatic("IsCallTypeModifier", New System.Type() {GetType(Global.PInvoke.Parser.TokenType)}, args),Boolean)
        Return ret
    End Function
    
    Friend Shared Function BuildKeywordMap() As System.Collections.Generic.Dictionary(Of String, PInvoke.Parser.TokenType)
        Dim args(-1) As Object
        Dim ret As System.Collections.Generic.Dictionary(Of String, PInvoke.Parser.TokenType) = CType(m_privateType.InvokeStatic("BuildKeywordMap", New System.Type(-1) {}, args),System.Collections.Generic.Dictionary(Of String, PInvoke.Parser.TokenType))
        Return ret
    End Function
    
    Friend Shared Function IsAnyWord(ByVal tt As Global.PInvoke.Parser.TokenType) As Boolean
        Dim args() As Object = New Object() {tt}
        Dim ret As Boolean = CType(m_privateType.InvokeStatic("IsAnyWord", New System.Type() {GetType(Global.PInvoke.Parser.TokenType)}, args),Boolean)
        Return ret
    End Function
    
    Friend Shared Function IsNumber(ByVal tt As Global.PInvoke.Parser.TokenType) As Boolean
        Dim args() As Object = New Object() {tt}
        Dim ret As Boolean = CType(m_privateType.InvokeStatic("IsNumber", New System.Type() {GetType(Global.PInvoke.Parser.TokenType)}, args),Boolean)
        Return ret
    End Function
    
    Friend Shared Function IsCharacter(ByVal tt As Global.PInvoke.Parser.TokenType) As Boolean
        Dim args() As Object = New Object() {tt}
        Dim ret As Boolean = CType(m_privateType.InvokeStatic("IsCharacter", New System.Type() {GetType(Global.PInvoke.Parser.TokenType)}, args),Boolean)
        Return ret
    End Function
    
    Friend Shared Function IsQuotedString(ByVal tt As Global.PInvoke.Parser.TokenType) As Boolean
        Dim args() As Object = New Object() {tt}
        Dim ret As Boolean = CType(m_privateType.InvokeStatic("IsQuotedString", New System.Type() {GetType(Global.PInvoke.Parser.TokenType)}, args),Boolean)
        Return ret
    End Function
    
    Friend Shared Function IsBinaryOperation(ByVal tt As Global.PInvoke.Parser.TokenType) As Boolean
        Dim args() As Object = New Object() {tt}
        Dim ret As Boolean = CType(m_privateType.InvokeStatic("IsBinaryOperation", New System.Type() {GetType(Global.PInvoke.Parser.TokenType)}, args),Boolean)
        Return ret
    End Function
    
    Friend Shared Function IsPreprocessorToken(ByVal tt As Global.PInvoke.Parser.TokenType) As Boolean
        Dim args() As Object = New Object() {tt}
        Dim ret As Boolean = CType(m_privateType.InvokeStatic("IsPreprocessorToken", New System.Type() {GetType(Global.PInvoke.Parser.TokenType)}, args),Boolean)
        Return ret
    End Function
    
    Friend Shared Function ConvertToString(ByVal token As Global.PInvoke.Parser.Token) As String
        Dim args() As Object = New Object() {token}
        Dim ret As String = CType(m_privateType.InvokeStatic("ConvertToString", New System.Type() {GetType(Global.PInvoke.Parser.Token)}, args),String)
        Return ret
    End Function
    
    Friend Shared Function TryConvertToString(ByVal token As Global.PInvoke.Parser.Token, ByRef str As String) As Boolean
        Dim args() As Object = New Object() {token, str}
        Dim ret As Boolean = CType(m_privateType.InvokeStatic("TryConvertToString", New System.Type() {GetType(Global.PInvoke.Parser.Token), GetType(String).MakeByRefType}, args),Boolean)
        str = CType(args(1),String)
        Return ret
    End Function
    
    Friend Shared Function TryConvertToChar(ByVal token As Global.PInvoke.Parser.Token, ByRef retChar As Char) As Boolean
        Dim args() As Object = New Object() {token, retChar}
        Dim ret As Boolean = CType(m_privateType.InvokeStatic("TryConvertToChar", New System.Type() {GetType(Global.PInvoke.Parser.Token), GetType(Char).MakeByRefType}, args),Boolean)
        retChar = CType(args(1),Char)
        Return ret
    End Function
    
    Friend Overloads Shared Function TryConvertToNumber(ByVal t As Global.PInvoke.Parser.Token, ByRef val As Object) As Boolean
        Dim args() As Object = New Object() {t, val}
        Dim ret As Boolean = CType(m_privateType.InvokeStatic("TryConvertToNumber", New System.Type() {GetType(Global.PInvoke.Parser.Token), GetType(Object).MakeByRefType}, args),Boolean)
        val = CType(args(1),Object)
        Return ret
    End Function
    
    Friend Overloads Shared Function TryConvertToNumber(ByVal str As String, ByRef retValue As Object) As Boolean
        Dim args() As Object = New Object() {str, retValue}
        Dim ret As Boolean = CType(m_privateType.InvokeStatic("TryConvertToNumber", New System.Type() {GetType(String), GetType(Object).MakeByRefType}, args),Boolean)
        retValue = CType(args(1),Object)
        Return ret
    End Function
    
    Friend Shared Function ProcessNumberInfo(ByRef str As String, ByRef info As Global.PInvokeTest.PInvoke_Parser_TokenHelper_NumberInfoAccessor) As Boolean
        Dim info_val_target As Object = Nothing
        If (Not (info) Is Nothing) Then
            info_val_target = info.Target
        End If
        Dim args() As Object = New Object() {str, info_val_target}
        Dim target As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("sigimplib", "PInvoke.Parser.TokenHelper+NumberInfo")
        Dim ret As Boolean = CType(m_privateType.InvokeStatic("ProcessNumberInfo", New System.Type() {GetType(String).MakeByRefType, target.ReferencedType.MakeByRefType}, args),Boolean)
        str = CType(args(0),String)
        Dim args_info_val As Object = args(1)
        Dim args_info As Global.PInvokeTest.PInvoke_Parser_TokenHelper_NumberInfoAccessor = Nothing
        If (Not (args_info_val) Is Nothing) Then
            args_info = New Global.PInvokeTest.PInvoke_Parser_TokenHelper_NumberInfoAccessor(args_info_val)
        End If
        info = args_info
        Return ret
    End Function
    
    Friend Shared Function TryParseOctalNumber(ByVal number As String, ByVal isUnsigned As Boolean, ByRef base10Value As String) As Boolean
        Dim args() As Object = New Object() {number, isUnsigned, base10Value}
        Dim ret As Boolean = CType(m_privateType.InvokeStatic("TryParseOctalNumber", New System.Type() {GetType(String), GetType(Boolean), GetType(String).MakeByRefType}, args),Boolean)
        base10Value = CType(args(2),String)
        Return ret
    End Function
    
    Friend Shared Function TryConvertToPoundToken(ByVal word As String, ByRef token As Global.PInvoke.Parser.Token) As Boolean
        Dim args() As Object = New Object() {word, token}
        Dim ret As Boolean = CType(m_privateType.InvokeStatic("TryConvertToPoundToken", New System.Type() {GetType(String), GetType(Global.PInvoke.Parser.Token).MakeByRefType}, args),Boolean)
        token = CType(args(1),Global.PInvoke.Parser.Token)
        Return ret
    End Function
    
    Friend Shared Function CreatePrivate() As Object
        Dim priv_obj As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("sigimplib", "PInvoke.Parser.TokenHelper", New Object(-1) {})
        Return priv_obj.Target
    End Function
End Class
<System.Diagnostics.DebuggerStepThrough(),  _
 System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")>  _
Friend Class PInvoke_Parser_TokenHelper_NumberInfoAccessor
    Inherits BaseAccessor
    
    Protected Shared m_privateType As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("sigimplib", "PInvoke.Parser.TokenHelper+NumberInfo")
    
    Friend Sub New(ByVal target As Object)
        MyBase.New(target, m_privateType)
    End Sub
    
    Friend Property Style() As Global.System.Globalization.NumberStyles
        Get
            Dim ret As Global.System.Globalization.NumberStyles = CType(m_privateObject.GetFieldOrProperty("Style"),Global.System.Globalization.NumberStyles)
            Return ret
        End Get
        Set
            m_privateObject.SetFieldOrProperty("Style", value)
        End Set
    End Property
    
    Friend Property IsUnsigned() As Boolean
        Get
            Dim ret As Boolean = CType(m_privateObject.GetFieldOrProperty("IsUnsigned"),Boolean)
            Return ret
        End Get
        Set
            m_privateObject.SetFieldOrProperty("IsUnsigned", value)
        End Set
    End Property
    
    Friend Property IsLong() As Boolean
        Get
            Dim ret As Boolean = CType(m_privateObject.GetFieldOrProperty("IsLong"),Boolean)
            Return ret
        End Get
        Set
            m_privateObject.SetFieldOrProperty("IsLong", value)
        End Set
    End Property
    
    Friend Property IsFloatingPoint() As Boolean
        Get
            Dim ret As Boolean = CType(m_privateObject.GetFieldOrProperty("IsFloatingPoint"),Boolean)
            Return ret
        End Get
        Set
            m_privateObject.SetFieldOrProperty("IsFloatingPoint", value)
        End Set
    End Property
    
    Friend Property IsOctal() As Boolean
        Get
            Dim ret As Boolean = CType(m_privateObject.GetFieldOrProperty("IsOctal"),Boolean)
            Return ret
        End Get
        Set
            m_privateObject.SetFieldOrProperty("IsOctal", value)
        End Set
    End Property
    
    Friend Property Exponent() As Integer
        Get
            Dim ret As Integer = CType(m_privateObject.GetFieldOrProperty("Exponent"),Integer)
            Return ret
        End Get
        Set
            m_privateObject.SetFieldOrProperty("Exponent", value)
        End Set
    End Property
    
    Friend Shared Function CreatePrivate() As Global.System.ValueType
        Dim priv_obj As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("sigimplib", "PInvoke.Parser.TokenHelper+NumberInfo", New Object(-1) {})
        Return CType(priv_obj.Target,Global.System.ValueType)
    End Function
End Class
