' Copyright (c) Microsoft Corporation.  All rights reserved.
'The following code was generated by Microsoft Visual Studio 2005.
'The test owner should check each test for validity.
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports System
Imports System.Text
Imports System.Collections.Generic
Imports PInvoke
Imports PInvoke.Parser


'''<summary>
'''This is a test class for PInvoke.Parser.NativeTypeBag and is intended
'''to contain all PInvoke.Parser.NativeTypeBag Unit Tests
'''</summary>
<TestClass()> _
Public Class NativeSymbolBagTest


    Private testContextInstance As TestContext

    '''<summary>
    '''Gets or sets the test context which provides
    '''information about and functionality for the current test run.
    '''</summary>
    Public Property TestContext() As TestContext
        Get
            Return testContextInstance
        End Get
        Set(ByVal value As TestContext)
            testContextInstance = value
        End Set
    End Property

#Region "Additional test attributes"
    '
    'You can use the following additional attributes as you write your tests:
    '
    'Use ClassInitialize to run code before running the first test in the class
    '
    '<ClassInitialize()>  _
    'Public Shared Sub MyClassInitialize(ByVal testContext As TestContext)
    'End Sub
    '
    'Use ClassCleanup to run code after all tests in a class have run
    '
    '<ClassCleanup()>  _
    'Public Shared Sub MyClassCleanup()
    'End Sub
    '
    'Use TestInitialize to run code before running each test
    '
    '<TestInitialize()>  _
    'Public Sub MyTestInitialize()
    'End Sub
    '
    'Use TestCleanup to run code after each test has run
    '
    '<TestCleanup()>  _
    'Public Sub MyTestCleanup()
    'End Sub
    '
#End Region

    '''<summary>
    '''A test for AddDefinedType(ByVal PInvoke.Parser.NativeDefinedType)
    '''</summary>
    <TestMethod()> _
    Public Sub AddDefinedTypeTest()
        Dim bag As New NativeSymbolBag()
        Dim definedNt1 As New NativeStruct("s1")
        bag.AddDefinedType(definedNt1)

        Dim ret1 As NativeType = Nothing
        Assert.IsTrue(bag.TryFindOrLoadNativeType(definedNt1.DisplayName, ret1))
        Assert.AreSame(ret1, definedNt1)
    End Sub

    <TestMethod()> _
    Public Sub AddDefinedTypeTest2()
        Dim bag As New NativeSymbolBag()
        Dim definedNt1 As New NativeStruct("s1")
        Dim definedNt2 As New NativeStruct("s2")
        bag.AddDefinedType(definedNt1)
        bag.AddDefinedType(definedNt2)

        Dim ret1 As NativeType = Nothing
        Dim ret2 As NativeType = Nothing
        Assert.IsTrue(bag.TryFindOrLoadNativeType(definedNt1.DisplayName, ret1))
        Assert.IsTrue(bag.TryFindOrLoadNativeType(definedNt2.DisplayName, ret2))
        Assert.AreSame(ret1, definedNt1)
        Assert.AreSame(ret2, definedNt2)
    End Sub

    ''' <summary>
    ''' Adding the same type twice should throw an exception
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    <ExpectedException(GetType(ArgumentException))> _
    Public Sub AddDefinedTypeTest3()
        Dim bag As New NativeSymbolBag()
        Dim definedNt1 As New NativeStruct("s1")
        Dim definedNt2 As New NativeStruct("s1")
        bag.AddDefinedType(definedNt1)
        bag.AddDefinedType(definedNt2)
    End Sub

    <TestMethod()> _
    Public Sub AddTypeDef1()
        Dim bag As New NativeSymbolBag()
        Dim td1 As New NativeTypeDef("td1")

        bag.AddTypedef(td1)

        Dim ret1 As NativeType = Nothing
        Assert.IsTrue(bag.TryFindOrLoadNativeType(td1.DisplayName, ret1))
        Assert.AreSame(ret1, td1)

    End Sub

    <TestMethod()> _
    Public Sub AddTypeDef2()
        Dim bag As New NativeSymbolBag()
        Dim td1 As New NativeTypeDef("td1")
        Dim td2 As New NativeTypeDef("td2")

        bag.AddTypedef(td1)
        bag.AddTypedef(td2)

        Dim ret1 As NativeType = Nothing
        Dim ret2 As NativeType = Nothing
        Assert.IsTrue(bag.TryFindOrLoadNativeType(td1.DisplayName, ret1))
        Assert.AreSame(ret1, td1)
        Assert.IsTrue(bag.TryFindOrLoadNativeType(td2.DisplayName, ret2))
        Assert.AreSame(ret2, td2)
    End Sub

    ''' <summary>
    ''' adding the same typedefe twice should throw an exception
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    <ExpectedException(GetType(ArgumentException))> _
    Public Sub AddTypeDef3()
        Dim bag As New NativeSymbolBag()
        Dim td1 As New NativeTypeDef("td1")
        Dim td2 As New NativeTypeDef("td1")

        bag.AddTypedef(td1)
        bag.AddTypedef(td2)
    End Sub

    <TestMethod()> _
    Public Sub AddMixed1()
        Dim bag As New NativeSymbolBag()
        Dim definedNt1 As New NativeStruct("s1")
        bag.AddDefinedType(definedNt1)
        Dim td1 As New NativeTypeDef("td1")
        bag.AddTypedef(td1)

        Dim ret As NativeType = Nothing
        Assert.IsTrue(bag.TryFindOrLoadNativeType(definedNt1.DisplayName, ret))
        Assert.AreSame(definedNt1, ret)
        Assert.IsTrue(bag.TryFindOrLoadNativeType(td1.DisplayName, ret))
        Assert.AreSame(td1, ret)

    End Sub

    ''' <summary>
    ''' TypeDefs and NativedefinedTypes can have the same full name.  Doesn't make
    ''' much sense in the real world but it's allowed for flexibility in the parser
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub AddMixed2()
        Dim bag As New NativeSymbolBag()
        Dim definedNt1 As New NativeStruct("s1")
        bag.AddDefinedType(definedNt1)
        Dim td1 As New NativeTypeDef("s1")
        bag.AddTypedef(td1)

        Dim ret As NativeType = Nothing
        Assert.IsTrue(bag.TryFindOrLoadNativeType(definedNt1.DisplayName, ret))
        Assert.AreSame(definedNt1, ret)
        Assert.IsTrue(bag.TryFindOrLoadNativeType(td1.DisplayName, ret))
        Assert.AreSame(definedNt1, ret)
    End Sub

    ''' <summary>
    ''' Resolve a simple type def
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub Resolve1()
        Dim bag As New NativeSymbolBag()
        Dim s1 As New NativeStruct("s1")
        bag.AddDefinedType(s1)

        Dim td1 As New NativeTypeDef("td1")
        Dim n1 As New NativeNamedType("s1")
        td1.RealType = n1
        bag.AddTypedef(td1)

        Assert.IsTrue(bag.TryResolveSymbolsAndValues())
        Assert.AreSame(s1, n1.RealType)
    End Sub

    ''' <summary>
    ''' Resolve a pointer type
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub Resolve2()
        Dim bag As New NativeSymbolBag()
        Dim s1 As New NativeStruct("s1")
        bag.AddDefinedType(s1)

        Dim td1 As New NativeTypeDef("td1")
        Dim n1 As New NativeNamedType("s1")
        Dim p1 As New NativePointer(n1)
        td1.RealType = p1
        bag.AddTypedef(td1)

        Assert.IsTrue(bag.TryResolveSymbolsAndValues())
        Assert.AreSame(s1, n1.RealType)
    End Sub

    ''' <summary>
    ''' Simple proc add
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub Proc1()
        Dim bag As New NativeSymbolBag()

        Dim p1 As New NativeProcedure("p1")
        p1.Signature.ReturnType = New NativeBuiltinType(BuiltinType.NativeDouble)

        bag.AddProcedure(p1)
        Assert.IsTrue(bag.TryResolveSymbolsAndValues())
    End Sub

    ''' <summary>
    ''' Resolve a procedure with a simple parameter
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub Proc2()
        Dim bag As New NativeSymbolBag()

        Dim p1 As New NativeProcedure("p1")
        p1.Signature.ReturnType = New NativeBuiltinType(BuiltinType.NativeDouble)
        p1.Signature.Parameters.Add(New NativeParameter("param1", New NativeBuiltinType(BuiltinType.NativeDouble)))

        bag.AddProcedure(p1)
        Assert.IsTrue(bag.TryResolveSymbolsAndValues())
    End Sub

    ''' <summary>
    ''' Unresolvable parameter
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub Proc3()
        Dim bag As New NativeSymbolBag()

        Dim p1 As New NativeProcedure("p1")
        p1.Signature.ReturnType = New NativeBuiltinType(BuiltinType.NativeDouble)
        p1.Signature.Parameters.Add(New NativeParameter("param1", New NativeNamedType("foo")))

        bag.AddProcedure(p1)
        Assert.IsFalse(bag.TryResolveSymbolsAndValues())
    End Sub

    ''' <summary>
    ''' Unresolavable return type
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub Proc4()
        Dim bag As New NativeSymbolBag()

        Dim p1 As New NativeProcedure("p1")
        p1.Signature.ReturnType = New NativeNamedType("foo")
        p1.Signature.Parameters.Add(New NativeParameter("param1", New NativeBuiltinType(BuiltinType.NativeDouble)))

        bag.AddProcedure(p1)
        Assert.IsFalse(bag.TryResolveSymbolsAndValues())
    End Sub

    ''' <summary>
    ''' resolve a named return type 
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub Proc5()
        Dim bag As New NativeSymbolBag()

        Dim p1 As New NativeProcedure("p1")
        p1.Signature.ReturnType = New NativeNamedType("foo")
        p1.Signature.Parameters.Add(New NativeParameter("param1", New NativeBuiltinType(BuiltinType.NativeDouble)))

        bag.AddProcedure(p1)
        bag.AddTypedef(New NativeTypeDef("foo", New NativeBuiltinType(BuiltinType.NativeFloat)))
        Assert.IsTrue(bag.TryResolveSymbolsAndValues())
    End Sub

    ''' <summary>
    ''' resolve a named parameter
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub Proc6()
        Dim bag As New NativeSymbolBag()

        Dim p1 As New NativeProcedure("p1")
        p1.Signature.ReturnType = New NativeBuiltinType(BuiltinType.NativeInt32, True)
        p1.Signature.Parameters.Add(New NativeParameter("param1", New NativeNamedType("foo")))

        bag.AddProcedure(p1)
        bag.AddTypedef(New NativeTypeDef("foo", New NativeBuiltinType(BuiltinType.NativeFloat)))
        Assert.IsTrue(bag.TryResolveSymbolsAndValues())
    End Sub

    <TestMethod()> _
    Public Sub FindOrLoad1()
        Dim ns As NativeStorage = NativeStorage.DefaultInstance
        ns.AddDefinedType(New NativeStruct("s1"))
        Dim bag As New NativeSymbolBag(ns)

        Dim s1 As NativeDefinedType = Nothing
        Assert.IsFalse(bag.TryFindDefinedType("s1", s1))
        Assert.IsTrue(bag.TryFindOrLoadDefinedType("s1", s1))
        Assert.IsTrue(bag.TryFindDefinedType("s1", s1))
    End Sub

    <TestMethod()> _
    Public Sub FindOrLoad2()
        Dim ns As NativeStorage = NativeStorage.DefaultInstance
        ns.AddTypedef(New NativeTypeDef("td", New NativeBuiltinType(BuiltinType.NativeChar)))
        Dim bag As New NativeSymbolBag(ns)

        Dim td As NativeTypeDef = Nothing
        Assert.IsFalse(bag.TryFindTypedef("td", td))
        Assert.IsTrue(bag.TryFindOrLoadTypedef("td", td))
        Assert.IsTrue(bag.TryFindTypedef("td", td))
    End Sub

    <TestMethod()> _
    Public Sub FindOrLoad3()
        Dim ns As NativeStorage = NativeStorage.DefaultInstance
        ns.AddConstant(New NativeConstant("c1", "value"))
        Dim bag As New NativeSymbolBag(ns)

        Dim c As NativeConstant = Nothing
        Assert.IsFalse(bag.TryFindConstant("c1", c))
        Assert.IsTrue(bag.TryFindOrLoadConstant("c1", c))
        Assert.IsTrue(bag.TryFindConstant("c1", c))
    End Sub

    <TestMethod()> _
    Public Sub FindOrLoad4()
        Dim ns As NativeStorage = NativeStorage.DefaultInstance
        Dim p1 As New NativeProcedure("p1")
        p1.Signature.ReturnType = New NativeBuiltinType(BuiltinType.NativeBoolean)
        ns.AddProcedure(p1)
        Dim bag As New NativeSymbolBag(ns)

        Dim p As NativeProcedure = Nothing
        Assert.IsFalse(bag.TryFindProcedure("p1", p))
        Assert.IsTrue(bag.TryFindOrLoadProcedure("p1", p))
        Assert.IsTrue(bag.TryFindProcedure("p1", p))
    End Sub

    ''' <summary>
    ''' Make sure we can load the cases where the user does a 
    ''' "typedef struct foo foo"
    ''' 
    ''' This is a common C practice and we need to be able to resolve this correctly
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub FindOrLoad5()
        Dim bag As New NativeSymbolBag()
        bag.AddTypedef(New NativeTypeDef("foo", New NativeNamedType("struct", "foo")))
        bag.AddDefinedType(New NativeStruct("foo"))

        Dim nt As NativeType = Nothing
        Assert.IsTrue(bag.TryFindOrLoadNativeType(New NativeNamedType("struct", "foo"), nt))
        Assert.AreEqual(NativeSymbolKind.StructType, nt.Kind)
    End Sub

    ''' <summary>
    ''' When a type is loaded during a resolve it should be added
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub ResolveLoad1()
        Dim ns As New NativeStorage
        ns.AddDefinedType(New NativeStruct("s1"))

        Dim bag As New NativeSymbolBag(ns)
        bag.AddTypedef(New NativeTypeDef("S1", "s1"))
        Assert.IsTrue(bag.TryResolveSymbolsAndValues())

        Dim td As NativeDefinedType = Nothing
        Assert.IsTrue(bag.TryFindDefinedType("s1", td))
    End Sub

    <TestMethod()> _
    Public Sub ResolveLoad2()
        Dim ns As New NativeStorage
        ns.AddTypedef(New NativeTypeDef("TEST_INT", BuiltinType.NativeInt32))

        Dim s1 As New NativeStruct("s1")
        s1.Members.Add(New NativeMember("m1", New NativeNamedType("TEST_INT")))

        Dim bag As New NativeSymbolBag(ns)
        bag.AddDefinedType(s1)
        Assert.IsTrue(bag.TryResolveSymbolsAndValues())

        Dim td As NativeTypeDef = Nothing
        Assert.IsTrue(bag.TryFindTypedef("TEST_INT", td))
    End Sub


    <TestMethod()> _
    Public Sub Anonymous1()
        Dim name As String = NativeSymbolBag.GenerateAnonymousName()
        Assert.IsTrue(NativeSymbolBag.IsAnonymousName(name))
    End Sub

    <TestMethod()> _
    Public Sub Anonymous2()
        Assert.IsFalse(NativeSymbolBag.IsAnonymousName("foo"))
    End Sub

    <TestMethod()> _
    Public Sub AnonymousType1()
        Dim nt As New NativeStruct()
        nt.IsAnonymous = True
        Assert.IsTrue(String.IsNullOrEmpty(nt.Name))

        Dim bag As New NativeSymbolBag()
        bag.AddDefinedType(nt)
        Assert.IsTrue(NativeSymbolBag.IsAnonymousName(nt.Name))
    End Sub

    ''' <summary>
    ''' Make sure we can load a type that has a recursive reference to itself
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub Storage1()
        Dim bag As New NativeSymbolBag()
        bag.NativeStorageLookup = StorageFactory.CreateStandard()

        Dim nt As NativeType = Nothing
        Assert.IsTrue(bag.TryFindOrLoadNativeType("RecursiveStruct", nt))
    End Sub

    ''' <summary>
    ''' Use one const to resolve the other
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub Value1()
        Dim bag As New NativeSymbolBag()
        bag.AddConstant(New NativeConstant("foo", "1"))
        bag.AddConstant(New NativeConstant("bar", "foo+2"))

        Assert.AreEqual(1, bag.FindUnresolvedNativeValues().Count)
        Assert.IsTrue(bag.TryResolveSymbolsAndValues())
    End Sub

    ''' <summary>
    ''' Resolve one enum value against the other
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub Value2()
        Dim bag As New NativeSymbolBag()
        Dim ntEnum As NativeEnum = New NativeEnum("Enum1")
        ntEnum.Values.Add(New NativeEnumValue("v1", "1"))
        ntEnum.Values.Add(New NativeEnumValue("v2", "v1+1"))
        bag.AddDefinedType(ntEnum)
        Assert.AreEqual(1, bag.FindUnresolvedNativeValues().Count)
        Assert.IsTrue(bag.TryResolveSymbolsAndValues())
    End Sub

    ''' <summary>
    ''' Resolve a cast expression type
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub Value3()
        Dim bag As New NativeSymbolBag()
        Dim ntStruct1 As New NativeStruct("s1")
        bag.AddDefinedType(ntStruct1)

        Dim ntConst1 As New NativeConstant("c1", "(s1)1")
        bag.AddConstant(ntConst1)

        Assert.AreEqual(1, bag.FindUnresolvedNativeValues().Count)
        Assert.IsTrue(bag.TryResolveSymbolsAndValues())
    End Sub

    ''' <summary>
    ''' Resolve a constant value
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub Value4()
        Dim bag As New NativeSymbolBag()
        Dim ntConst1 As New NativeConstant("c1", "1")
        bag.AddConstant(ntConst1)
        Dim ntConst2 As New NativeConstant("c2", "5+c1")
        bag.AddConstant(ntConst2)

        Assert.AreEqual(1, bag.FindUnresolvedNativeValues().Count)
        Assert.IsTrue(bag.TryResolveSymbolsAndValues())
    End Sub

    ''' <summary>
    ''' Make sure that a SymbolValue can be properly loaded from storage
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub ValueFromStorage1()
        Dim bag As New NativeSymbolBag()
        bag.NativeStorageLookup.AddConstant(New NativeConstant("c1", "1"))
        Dim ntConst2 As New NativeConstant("c2", "5+c1")
        bag.AddConstant(ntConst2)

        Assert.AreEqual(1, bag.FindUnresolvedNativeValues().Count)
        Assert.IsTrue(bag.TryResolveSymbolsAndValues())
    End Sub

    ''' <summary>
    ''' Make sure an enum value can be loaded from storage
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub ValueFromStorage2()
        Dim bag As New NativeSymbolBag()

        Dim ntEnum As New NativeEnum("e1")
        ntEnum.Values.Add(New NativeEnumValue("v1", "5"))
        bag.NativeStorageLookup.AddDefinedType(ntEnum)

        Dim ntConst1 As New NativeConstant("c1", "5+v1")
        bag.AddConstant(ntConst1)

        Assert.AreEqual(1, bag.FindUnresolvedNativeValues().Count)
        Assert.IsTrue(bag.TryResolveSymbolsAndValues())
    End Sub

    ''' <summary>
    ''' Make sure cast expression types can be loaded from storage
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub ValueFromStorage3()
        Dim bag As New NativeSymbolBag()
        bag.NativeStorageLookup.AddDefinedType(New NativeStruct("s1"))

        Dim ntConst1 As New NativeConstant("c1", "(s1)1")
        bag.AddConstant(ntConst1)

        Assert.AreEqual(1, bag.FindUnresolvedNativeValues().Count)
        Assert.IsTrue(bag.TryResolveSymbolsAndValues())
    End Sub

    ''' <summary>
    ''' Make sure that opaque types are resolved
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub Opaque1()
        Dim named As New NativeNamedType("struct", "foo")
        Dim ptr As New NativePointer(named)
        Dim td As New NativeTypeDef("FOOBAR", ptr)
        Dim bag As New NativeSymbolBag()

        bag.AddTypedef(td)
        Assert.AreEqual(1, bag.FindUnresolvedNativeSymbolRelationships().Count)
        Assert.IsTrue(bag.TryResolveSymbolsAndValues())
        Assert.IsNotNull(named.RealType)
        Assert.AreEqual(NativeSymbolKind.OpaqueType, named.RealType.Kind)
    End Sub

    ''' <summary>
    ''' Don't resolve an unqualified type name to an opaque type 
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub Opaque2()
        Dim named As New NativeNamedType("foo")
        Dim ptr As New NativePointer(named)
        Dim td As New NativeTypeDef("FOOBAR", ptr)
        Dim bag As New NativeSymbolBag()

        bag.AddTypedef(td)
        Assert.AreEqual(1, bag.FindUnresolvedNativeSymbolRelationships().Count)
        Assert.IsFalse(bag.TryResolveSymbolsAndValues())
    End Sub

End Class
