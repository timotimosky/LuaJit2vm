' Copyright (c) Microsoft Corporation.  All rights reserved.
'The following code was generated by Microsoft Visual Studio 2005.
'The test owner should check each test for validity.
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports System
Imports System.Text
Imports System.Collections.Generic
Imports PInvoke.Parser





'''<summary>
'''This is a test class for PInvoke.Parser.Macro and is intended
'''to contain all PInvoke.Parser.Macro Unit Tests
'''</summary>
<TestClass()> _
Public Class MacroTest


    Private testContextInstance As TestContext

    '''<summary>
    '''Gets or sets the test context which provides
    '''information about and functionality for the current test run.
    '''</summary>
    Public Property TestContext() As TestContext
        Get
            Return testContextInstance
        End Get
        Set(ByVal value As TestContext)
            testContextInstance = Value
        End Set
    End Property

#Region "Additional test attributes"
    '
    'You can use the following additional attributes as you write your tests:
    '
    'Use ClassInitialize to run code before running the first test in the class
    '
    '<ClassInitialize()>  _
    'Public Shared Sub MyClassInitialize(ByVal testContext As TestContext)
    'End Sub
    '
    'Use ClassCleanup to run code after all tests in a class have run
    '
    '<ClassCleanup()>  _
    'Public Shared Sub MyClassCleanup()
    'End Sub
    '
    'Use TestInitialize to run code before running each test
    '
    '<TestInitialize()>  _
    'Public Sub MyTestInitialize()
    'End Sub
    '
    'Use TestCleanup to run code after each test has run
    '
    '<TestCleanup()>  _
    'Public Sub MyTestCleanup()
    'End Sub
    '
#End Region

    <TestMethod()> _
    Public Sub CreateMethod1()
        Dim m As MethodMacro = Nothing
        Assert.IsTrue(MethodMacro.TryCreateFromDeclaration("m1", "(x) x + 2", m))
        Assert.AreEqual("m1", m.Name)
    End Sub

    <TestMethod()> _
    Public Sub CreateMethod2()
        Dim m As MethodMacro = Nothing
        Assert.IsFalse(MethodMacro.TryCreateFromDeclaration("m1", "2", m))
    End Sub

    ''' <summary>
    ''' Make sure that whitespace is expactly preserved
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub CreateMethod3()
        Dim m As MethodMacro = Nothing
        Dim sig As String = "(x) ""foo""#x"
        Assert.IsTrue(MethodMacro.TryCreateFromDeclaration("m1", sig, m))
        Assert.AreEqual(sig, m.MethodSignature)
    End Sub

    <TestMethod()> _
    Public Sub CreateMethod4()
        Dim m As MethodMacro = Nothing
        Dim sig As String = "(x) ""foo""#x           +    5"
        Assert.IsTrue(MethodMacro.TryCreateFromDeclaration("m1", sig, m))
        Assert.AreEqual(sig, m.MethodSignature)
    End Sub

End Class
