' Copyright (c) Microsoft Corporation.  All rights reserved.
'The following code was generated by Microsoft Visual Studio 2005.
'The test owner should check each test for validity.
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports System
Imports System.Text
Imports System.Collections.Generic
Imports PInvoke.Parser
Imports Helper = PInvokeTest.PInvoke_Parser_TokenHelperAccessor


'''<summary>
'''This is a test class for PInvoke.Parser.TokenHelper and is intended
'''to contain all PInvoke.Parser.TokenHelper Unit Tests
'''</summary>
<TestClass()> _
Public Class TokenHelperTest

    Public Sub VerifyParse(ByVal str As String, ByVal value As Object)
        Dim converted As Object = Nothing
        Assert.IsTrue(Helper.TryConvertToNumber(str, converted))
        Assert.AreEqual(value, converted)
    End Sub

    Public Sub VerifyString(ByVal str As String)
        Dim token As New Token(TokenType.QuotedStringAnsi, """" & str & """")
        Dim converted As String = Nothing
        Assert.IsTrue(Helper.TryConvertToString(token, converted))
        Assert.AreEqual(str, converted)

        token = New Token(TokenType.QuotedStringUnicode, "L""" & str & """")
        Assert.IsTrue(Helper.TryConvertToString(token, converted))
        Assert.AreEqual(str, converted)
    End Sub

    Public Sub VerifyChar(ByVal c As Char)
        Dim token As New Token(TokenType.CharacterAnsi, "'" & c & "'")
        Dim converted As Char = "0"c
        Assert.IsTrue(Helper.TryConvertToChar(token, converted))
        Assert.AreEqual(c, converted)

        token = New Token(TokenType.CharacterUnicode, "L'" & c & "'")
        Assert.IsTrue(Helper.TryConvertToChar(token, converted))
        Assert.AreEqual(c, converted)
    End Sub

    Public Sub VerifyNumber(Of T)(ByVal str As String, ByVal number As T)
        Dim ret As Object = Nothing
        Assert.IsTrue(TokenHelper.TryConvertToNumber(str, ret))
        Assert.IsInstanceOfType(ret, number.GetType())
        Assert.AreEqual(number, ret)
    End Sub

    Private testContextInstance As TestContext

    '''<summary>
    '''Gets or sets the test context which provides
    '''information about and functionality for the current test run.
    '''</summary>
    Public Property TestContext() As TestContext
        Get
            Return testContextInstance
        End Get
        Set(ByVal value As TestContext)
            testContextInstance = value
        End Set
    End Property

    ''' <summary>
    ''' Simple 32 bit numbers
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub Signed1()
        Dim val As Object = Nothing
        Assert.IsTrue(Helper.TryConvertToNumber("42", val))
        Assert.AreEqual(42, val)
        Assert.IsTrue(Helper.TryConvertToNumber("400", val))
        Assert.AreEqual(400, val)
        Assert.IsTrue(Helper.TryConvertToNumber("-1", val))
        Assert.AreEqual(-1, val)
    End Sub

    ''' <summary>
    ''' Simple 64 bit number.  Should auto expand into a 64 bit number
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub Signed2()
        Dim base As Int64 = 6000000000
        VerifyParse(base.ToString(), base)
        VerifyParse("-" & base.ToString(), -base)
    End Sub

    ''' <summary>
    ''' Long suffix does not force a 64 bit number
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub Long1()
        VerifyParse("6L", 6)
        VerifyParse("26L", 26)
        VerifyParse("-26L", -26)
    End Sub

    ''' <summary>
    ''' UL should not force a 64 bit number
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub Long2()
        VerifyParse("6UL", CUInt(6))
        VerifyParse("26UL", CUInt(26))
    End Sub

    <TestMethod()> _
    Public Sub Float1()
        Dim val As Object = Nothing
        Assert.IsTrue(Helper.TryConvertToNumber("6.5F", val))
        Assert.AreEqual(6.5F, val)
    End Sub

    ''' <summary>
    ''' Make sure that a prefix floating point does not get confused as an octal
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub Float2()
        VerifyParse("0.1F", 0.1F)
        VerifyParse("0.2F", 0.2F)
    End Sub


    <TestMethod()> _
    Public Sub Exponent1()
        Dim val As Object = Nothing
        Assert.IsTrue(Helper.TryConvertToNumber("6e2", val))
        Assert.AreEqual(600.0F, val)
    End Sub

    <TestMethod()> _
    Public Sub Exponent2()
        Dim val As Object = Nothing
        Assert.IsTrue(Helper.TryConvertToNumber("6.5e2", val))
        Assert.AreEqual(650.0F, val)
    End Sub

    <TestMethod()> _
    Public Sub Exponent3()
        Dim val As Object = Nothing
        Assert.IsTrue(Helper.TryConvertToNumber("6.5e2L", val))
        Assert.AreEqual(650.0F, val)
    End Sub

    ''' <summary>
    ''' Simple unsigned 32 bit numbers
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub Unsigned1()
        Dim val As Object = Nothing
        Dim target As UInt32 = 42
        Assert.IsTrue(Helper.TryConvertToNumber("42U", val))
        Assert.AreEqual(target, val)
    End Sub

    ''' <summary>
    ''' Too big to be a UInt32
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub Unsigned2()
        Dim base As UInt64 = 6000000000
        VerifyParse(base.ToString() & "U", base)
        VerifyParse(base.ToString() & "u", base)
    End Sub

    ''' <summary>
    ''' Can't convert a 32 negative to a signed number
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub Unsigned3()
        Dim val As Object = Nothing
        Assert.IsTrue(Helper.TryConvertToNumber("-42", val))
        Assert.AreEqual(-42, val)
    End Sub

    ''' <summary>
    ''' Simple octal numbers
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub Octal1()
        VerifyParse("01", 1)
        VerifyParse("012", 10)
        VerifyParse("0101", 65)
    End Sub

    ''' <summary>
    ''' Octal numbers with the unsigned suffix
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub Octal2()
        VerifyParse("012U", CUInt(10))
        VerifyParse("01u", CUInt(1))
    End Sub


    <TestMethod()> _
    Public Sub Invalid1()
        Dim val As Object = Nothing
        Assert.IsFalse(Helper.TryConvertToNumber("aoo", val))
    End Sub

    <TestMethod()> _
    Public Sub CallingConvention()
        Assert.IsTrue(Helper.IsCallTypeModifier(TokenType.CDeclarationCallKeyword))
        Assert.IsTrue(Helper.IsCallTypeModifier(TokenType.StandardCallKeyword))
        Assert.IsTrue(Helper.IsCallTypeModifier(TokenType.ClrCallKeyword))
        Assert.IsTrue(Helper.IsCallTypeModifier(TokenType.InlineKeyword))
        Assert.IsTrue(Helper.IsCallTypeModifier(TokenType.PascalCallKeyword))
    End Sub

    <TestMethod()> _
    Public Sub String1()
        VerifyString("foo")
        VerifyString("baaoeuaoeu""")
        VerifyString("aoeu13AEuaoeu'")
    End Sub

    <TestMethod()> _
    Public Sub Char1()
        VerifyChar("a"c)
        VerifyChar("b"c)
        VerifyChar(ControlChars.Lf)
        VerifyChar(ChrW(55))
    End Sub

    <TestMethod()> _
    Public Sub Force64_1()
        VerifyNumber("4i64", 4L)
        VerifyNumber("999999999999999999i64", 999999999999999999L)
    End Sub

    <TestMethod()> _
    Public Sub Force64_2()
        VerifyNumber("4ui64", CULng(4L))
        VerifyNumber("999999999999999999ui64", CULng(999999999999999999L))
    End Sub


End Class
